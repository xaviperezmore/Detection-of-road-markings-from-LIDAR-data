#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jul  5 10:50:45 2022

@author: xavi
"""



from pickle import POP_MARK
import numpy as np
import matplotlib.pyplot as plt
import cv2
import pandas as pd
import cameratransform as ct

#%%

timestamps = pd.read_csv('/home/xavi/TFM/data/2011_09_26/2011_09_26_drive_0036_sync/oxts/timestamps.txt', sep=" |:", header=None)
timestamps.columns = ['date','hh','mm','ss']

dataoxts = pd.read_csv('/home/xavi/TFM/data/2011_09_26/2011_09_26_drive_0036_sync/oxts/data/0000000000.txt', sep=" ", header=None)
dataoxts.columns = ['lat', 'lon', 'alt',
                        'roll', 'pitch', 'yaw',
                        'vn', 've', 'vf', 'vl', 'vu',
                        'ax', 'ay', 'az', 'af', 'al', 'au',
                        'wx', 'wy', 'wz', 'wf', 'wl', 'wu',
                        'pos_accuracy', 'vel_accuracy',
                        'navstat', 'numsats',
                        'posmode', 'velmode', 'orimode']


for ii2 in range(1,len(timestamps)):
    oxtnumstr = (str(ii2).zfill(3))
    dataoxtsi = pd.read_csv('/home/xavi/TFM/data/2011_09_26/2011_09_26_drive_0036_sync/oxts/data/0000000'+r'{}'.format(oxtnumstr)+r".txt", sep=" ", header=None)
    dataoxtsi.columns = ['lat', 'lon', 'alt',
                        'roll', 'pitch', 'yaw',
                        'vn', 've', 'vf', 'vl', 'vu',
                        'ax', 'ay', 'az', 'af', 'al', 'au',
                        'wx', 'wy', 'wz', 'wf', 'wl', 'wu',
                        'pos_accuracy', 'vel_accuracy',
                        'navstat', 'numsats',
                        'posmode', 'velmode', 'orimode']

    dataoxts = pd.concat([dataoxts,dataoxtsi], ignore_index=True, axis=0)



#%%

def read_calib_file(filepath):
    """Read in a calibration file and parse into a dictionary."""
    data = {}

    with open(filepath, 'r') as f:
        for line in f.readlines():
            key, value = line.split(':', 1)
            # The only non-float values in these files are dates, which
            # we don't care about anyway
            try:
                data[key] = np.array([float(x) for x in value.split()])
            except ValueError:
                pass

    return data

camtocam = read_calib_file('/home/xavi/TFM/data/2011_09_26/calib_cam_to_cam.txt')




#%%

img = cv2.imread('/home/xavi/TFM/data/2011_09_26/2011_09_26_drive_0036_sync/image_00/data/0000000001.png')
#img = img[:,:,2]/255.



height = 1.65
alpha = np.double(dataoxts.loc[1,"pitch"]*np.pi/180.0)
beta = -np.double(dataoxts.loc[1,"yaw"]*np.pi/180.0)
gamma = np.double(dataoxts.loc[1,"roll"]*np.pi/180.0)

ppm = 7
xDist = 50
yDist = 50



#matK = np.array([fx, 0, u0, 0],[0, fy, v0, 0],[0, 0, 1, 0])

matK = np.reshape(camtocam['P_rect_00'],(3,4))

matT = np.array([[1, 0, 0, 0],[0, 1, 0, height],[0, 0, 1, 0],[0, 0, 0, 1]])

matRX = np.array([[1,0,0,0],[0,np.cos(alpha),-np.sin(alpha),0],[0,np.sin(alpha),np.cos(alpha),0],[0,0,0,1]])

matRY = np.array([[np.cos(beta),0,-np.sin(beta),0],[0,1,0,0],[np.sin(beta),0,np.cos(beta),0],[0,0,0,1]])

matRZ = np.array([[np.cos(gamma),-np.sin(gamma),0,0],[np.sin(gamma),np.cos(gamma),0,0],[0,0,1,0],[0,0,0,1]])

matR = np.dot(matRX,matRY,matRZ)


matTrans = np.dot(matK,np.dot(matR,matT))

#%%

cam = ct.Camera(ct.RectilinearProjection(focallength_mm=matK[0,0],
                                         sensor=(matK[0,3],matK[1,3]),
                                         image=(img.shape[1],img.shape[0])))


pitch = np.double(dataoxts.loc[1,"pitch"]*180/np.pi)
yaw = -np.double(dataoxts.loc[1,"yaw"]*180/np.pi)
roll = np.double(dataoxts.loc[1,"roll"]*180/np.pi)

cam.elevation_m = 1.65

cam.roll_deg = roll
cam.tilt_deg = pitch
cam.heading_deg = yaw



BEVimg = cam.getTopViewOfImage(img,[-150,150,50,300],scaling=4.2,do_plot=False,alpha=None,Z=0.0,skip_size_check=False,hide_backpoints=True)

plt.subplot(1,2,1)
plt.imshow(img)
plt.subplot(1,2,2)
plt.imshow(BEVimg)
